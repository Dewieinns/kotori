; ##########################################
;           Kotori configuration
; ##########################################


; ==========================================
;             General settings
; ==========================================

; bus adapters
[mqtt]
host        = 192.168.59.103
#port        = 1883

[wamp]
uri         = ws://0.0.0.0:9000/ws

; storage adapters
[influxdb]
version     = 0.9
host        = 192.168.59.103
#port        = 8086
username    = root
password    = root

; user interfaces
[grafana]
host        = 192.168.59.103
#port        = 3000
username    = admin
password    = secret

#[config-web]
#; web configuration gui
#http_port  = 36000



; ==========================================
;            Application settings
; ==========================================
[applications]
enable      = mqttkit-1, mqttkit-2, composite-1


; ------------------------------------------
; Name:     mqttkit
; Date:     March/April 2016
; About:    A generic distributed monitoring platform for collecting sensor data in wide-area setups.
; Channel:  Transport: MQTT over TCP; Format: JSON
; Storage:  InfluxDB
; ------------------------------------------
; This would be the same as::
;
;     from kotori.daq.application.mqttkit import mqttkit_application
;     mqttkit_application(settings)
; ------------------------------------------
[mqttkit-1]
realm       = mqttkit-1
mqtt_topics = mqttkit-1/#
app_factory = kotori.daq.application.mqttkit:mqttkit_application

[mqttkit-2]
realm       = mqttkit-2
mqtt_topics = mqttkit-2/#
app_factory = kotori.daq.application.mqttkit:mqttkit_application


; ------------------------------------------
; Name:     composite
; Date:     April 2016
; About:    A generic telemetry data collection application built from reusable
;           components on top of a powerful service composition framework
; Channel:  Transport: MQTT over TCP; Format: JSON
; Storage:  InfluxDB
; ------------------------------------------
[composite-1]
realm       = composite-1
mqtt_topics = composite-1/#
app_factory = kotori.daq.application.composite:boot
services    = kotori.daq.services.mig:MqttInfluxGrafanaService
graphing    = kotori.daq.graphing.grafana:GrafanaManager
strategy    = kotori.daq.intercom.strategies:WanBusStrategy




; ==========================================
;              Vendor settings
; ==========================================

[vendors]
#enable      = hydro2motion, hiveeyes, lst
enable      = hydro2motion, hiveeyes


[hydro2motion]
; ------------------------------------------
; Name:     Hydro2Motion
; Date:     April/May 2015
; About:    Collect and visualize telemetry data and position information from a fuel-cell powered vehicle
; Channel:  Transport: UDP over GPRS/3G/4G; Format: CSV
; Storage:  SQLite, MongoDB, InfluxDB
; See also: https://isarengineering.de/docs/kotori/applications/hydro2motion.html
; ------------------------------------------
http_port   = 35000
udp_port    = 7777
database    = hydro2motion_dev

[hiveeyes]
; ------------------------------------------
; Name:     Hiveeyes
; Date:     October 2015
; About:    A distributed monitoring platform collecting sensor data for the beekeeper community
; Channel:  Transport: BERadio over RF69, MQTT over TCP; Format: Bencode, JSON
; Storage:  InfluxDB
; See also: https://isarengineering.de/docs/kotori/applications/hiveeyes.html
; ------------------------------------------
realm       = hiveeyes
mqtt_topics = hiveeyes/#

[lst]
; ------------------------------------------
; Name:     LST
; Date:     November 2015
; About:    Universal data sink for laboratory experiments and test benches
; Channel:  Transport: UDP; Format: Binary
; Storage:  InfluxDB
; See also: https://isarengineering.de/docs/kotori/applications/lst.html
; ------------------------------------------
channels     = lst-h2m, lst-sattracker, lst-proptest

[lst-h2m]
udp_port     = 8888
wamp_topic   = edu.hm.lst.h2m
include_path = etc/headers
header_files = h2m_structs.h
graphing_legend_right_side = true

[lst-sattracker]
udp_port     = 8889
wamp_topic   = edu.hm.lst.sattracker
include_path = etc/headers
header_files = sattracker.h
graphing_legend_right_side = true

[lst-proptest]
udp_port     = 8887
wamp_topic   = edu.hm.lst.proptest
include_path = etc/headers/proptest
header_files = components.h
graphing_legend_right_side = true
